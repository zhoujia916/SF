<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="SystemUserMapper">
    <resultMap id="SystemUser" type="puzzle.sf.entity.SystemUser">
    	<id column="user_id" property="userId" /> 
    	<result column="login_name" property="loginName" /> 
    	<result column="user_name" property="userName" /> 
    	<result column="user_avatar" property="userAvatar" /> 
    	<result column="password" property="password" /> 
    	<result column="sex" property="sex" /> 
    	<result column="birthday" property="birthday" /> 
    	<result column="last_visit_time" property="lastVisitTime" /> 
    	<result column="last_visit_ip" property="lastVisitIp" /> 
    	<result column="online_time" property="onlineTime" /> 
    	<result column="user_type" property="userType" /> 
    	<result column="title" property="title" /> 
    	<result column="status" property="status" /> 
    	<result column="sort_order" property="sortOrder" />
        <collection property="roles" column="user_id" javaType="ArrayList" ofType="SystemRole" select="queryUserRole" />
        <collection property="groups" column="user_id" javaType="ArrayList" ofType="SystemUserGroup" select="queryUserGroup" />
        <collection property="depts" column="user_id" javaType="ArrayList" ofType="SystemDept" select="queryUserDept" />
    </resultMap>

    <sql id="allColumn">
    	user_id, login_name, user_name, user_avatar, password, sex, birthday, last_visit_time, last_visit_ip, online_time, user_type, title, status, sort_order
    </sql>

    <insert id="insert" parameterType="SystemUser" useGeneratedKeys="true" keyProperty="userId">
        insert into system_user 
        (
        	
        	<if test="loginName != null">login_name, </if>
        	<if test="userName != null">user_name, </if>
        	<if test="userAvatar != null">user_avatar, </if>
        	<if test="password != null">password, </if>
        	<if test="sex != null">sex, </if>
        	<if test="birthday != null">birthday, </if>
        	<if test="lastVisitTime != null">last_visit_time, </if>
        	<if test="lastVisitIp != null">last_visit_ip, </if>
        	<if test="onlineTime != null">online_time, </if>
        	<if test="userType != null">user_type, </if>
        	<if test="title != null">title, </if>
        	<if test="status != null">status, </if>
        	<if test="sortOrder != null">sort_order</if>
        )
        values 
        (
        	
        	<if test="loginName != null">#{loginName}, </if>
        	<if test="userName != null">#{userName}, </if>
        	<if test="userAvatar != null">#{userAvatar}, </if>
        	<if test="password != null">#{password}, </if>
        	<if test="sex != null">#{sex}, </if>
        	<if test="birthday != null">#{birthday}, </if>
        	<if test="lastVisitTime != null">#{lastVisitTime}, </if>
        	<if test="lastVisitIp != null">#{lastVisitIp}, </if>
        	<if test="onlineTime != null">#{onlineTime}, </if>
        	<if test="userType != null">#{userType}, </if>
        	<if test="title != null">#{title}, </if>
        	<if test="status != null">#{status}, </if>
        	<if test="sortOrder != null">#{sortOrder}</if>
       	)
    </insert>

    <update id="update" parameterType="SystemUser">
        update system_user
        <set>
            <if test="loginName != null">
                login_name = #{loginName},
            </if>
        	<if test="userName != null">  
        		user_name = #{userName},
        	</if>
        	<if test="userAvatar != null">  
        		user_avatar = #{userAvatar},
        	</if>
        	<if test="password != null">  
        		password = #{password},
        	</if>
        	<if test="sex != null">  
        		sex = #{sex},
        	</if>
        	<if test="birthday != null">  
        		birthday = #{birthday},
        	</if>
        	<if test="lastVisitTime != null">  
        		last_visit_time = #{lastVisitTime},
        	</if>
        	<if test="lastVisitIp != null">  
        		last_visit_ip = #{lastVisitIp},
        	</if>
        	<if test="onlineTime != null">  
        		online_time = #{onlineTime},
        	</if>
        	<if test="userType != null">  
        		user_type = #{userType},
        	</if>
        	<if test="title != null">  
        		title = #{title},
        	</if>
        	<if test="status != null">  
        		status = #{status},
        	</if>
        	<if test="sortOrder != null">  
        		sort_order = #{sortOrder},
        	</if>
        </set>
        where user_id=#{userId}
    </update>

    <delete id="delete" parameterType="Map">
        delete from system_user
        <where>
	        <trim prefixOverrides="and | or">  
	        	<if test="userId > 0">
	                user_id = #{userId}
	            </if>
                <if test="userIds != null and userIds.length > 0">
                    user_id in
                    <foreach collection="userIds" item="userId" open="(" separator="," close=")">
                        #{userId}
                    </foreach>
                </if>
	        	<if test="loginName != null">
	                login_name = #{loginName}
	            </if>
	        	<if test="userName != null">
	                user_name = #{userName}
	            </if>
	        	<if test="userAvatar != null">
	                user_avatar = #{userAvatar}
	            </if>
	        	<if test="password != null">
	                password = #{password}
	            </if>
	        	<if test="sex > 0">
	                sex = #{sex}
	            </if>
	        	<if test="lastVisitTime > 0">
	                last_visit_time = #{lastVisitTime}
	            </if>
	        	<if test="lastVisitIp != null">
	                last_visit_ip = #{lastVisitIp}
	            </if>
	        	<if test="onlineTime > 0">
	                online_time = #{onlineTime}
	            </if>
	        	<if test="userType > 0">
	                user_type = #{userType}
	            </if>
	        	<if test="title != null">
	                title = #{title}
	            </if>
	        	<if test="status > 0">
	                status = #{status}
	            </if>
	        	<if test="sortOrder > 0">
	                sort_order = #{sortOrder}
	            </if>
	        </trim>
        </where>
    </delete>

    <select id="query" parameterType="Map" resultMap="SystemUser">
        select <include refid="allColumn"/> from system_user
        <where>
            <trim prefixOverrides="and | or">
                <if test="userId >0">
                    and user_id = #{userId}
                </if>
                <if test="loginName != null and loginName!=''">
                    and login_name = #{loginName}
                </if>
                <if test="password != null and password!=''">
                    and password = #{password}
                </if>
            </trim>
        </where> 
    </select>

    <select id="queryList" parameterType="Map" resultMap="SystemUser">
        select su.* from system_user as su
        <where>
            <if test="userName != null and userName!=''">
                and user_name like CONCAT('%',#{userName},'%')
            </if>
            <if test="roleId!=null and roleId>0">
                and exists(
                select map_id from system_user_map as sum
                where sum.target_type = 1 and sum.target_id = ${roleId}
                and sum.user_id = su.user_id)
            </if>
            <if test="groupId!=null and groupId>0">
                and exists(
                select map_id from system_user_map as sum
                where sum.target_type = 2 and sum.target_id = ${groupId}
                and su.user_id=sum.user_id)
            </if>
            <if test="deptId!=null and deptId>0">
                and exists(
                select map_id from system_user_map as sum
                where sum.target_type = 3 and sum.target_id in
                (select sd.dept_id from system_dept as sd where sd.dept_id = ${deptId}
                or sd.parent_id = ${deptId}) and su.user_id=sum.user_id)
            </if>
        </where>
        order by sort_order desc,su.user_id desc
    </select>

    <select id="queryUserRole" parameterType="int" resultMap="SystemRoleMapper.SystemRole">
        select sr.* from system_role as sr
        where exists(
          select map_id from system_user_map as sum
          where sum.target_id = sr.role_id and sum.target_type = 1 and sum.user_id = #{user_id})
    </select>

    <select id="queryUserGroup" parameterType="int" resultMap="SystemUserGroupMapper.SystemUserGroup">
        select sug.* from system_user_group as sug
        where exists(
        select map_id from system_user_map as sum
        where sum.target_id = sug.group_id and sum.target_type = 2 and sum.user_id = #{userId})
    </select>

    <select id="queryUserDept" parameterType="int" resultMap="SystemDeptMapper.SystemDept">
        select sd.* from system_dept as sd
        where exists(
        select map_id from system_user_map as sum
        where sum.target_id = sd.dept_id and sum.target_type = 3 and sum.user_id = #{userId})
    </select>

</mapper>
